** Migrating to org-mode publishing
**** Wed, 08/14/19

-----

reading: http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html

**** Changing markdown into org with elisp
Lisp macros are like html templating engines; the code after the back tick is the template,
and code after the comma is the value to be inserted.
This will cause my functions to be expanded at compile time.
#+BEGIN_SRC elisp
(defmacro goto-min-save-match-data (body)
  `(progn 
    (goto-char (point-min))
     (save-match-data ,body)))
#+END_SRC
#+BEGIN_SRC elisp
(defun replace-regex-current-buffer (pattern new)
  (goto-min-save-match-data
   (while (re-search-forward pattern nil t) nil t
	  (replace-match new))))
#+END_SRC

#+BEGIN_SRC elisp
(defun replace-simple-md ()
  (interactive)
  (replace-regex-current-buffer "\t" "  ")
  (replace-regex-current-buffer "^---" (s-repeat 80 "-"))
  (replace-regex-current-buffer "*" "+")
  (replace-regex-current-buffer "^####" "****")
  (replace-regex-current-buffer "^##" "*"))
#+END_SRC

Luckily I
My least favorite feature of markdown is the code syntax. In a markdown file, four spaces before a line 
means that it will be compiled as a code block. This function deindents markdown code blocks by 4 spaces.
Luckily I included language tags before code blocks for highlighting.
#+BEGIN_SRC python
    :::python
    def hello()
        print("hello")
#+END_SRC 

This means that I can easily find the beginning of code blocks by looking for ~:::~ followed by a word.
The following function replaces wraps markdown code blocks in ~#+BEGIN_SRC~ and ~#+END_SRC#~. It captures the
language tag and adds it after the BEGIN tag.
#+BEGIN_SRC elisp
(defun replace-code-section ()
  (interactive)
  (goto-char (point-min))
  (save-match-data
    (while (re-search-forward "^[[:blank:]]+:::\\(\\w+\\)" nil t) nil t
	   (replace-match "#+BEGIN_SRC \\1")
	   (re-search-forward "^[[:alnum:]]")
           (move-beginning-of-line nil)
           (newline)
	   (insert "#+END_SRC")
	   (newline))))
#+END_SRC

Finally, deindent the old markdown code blocks by 4 spaces.
#+BEGIN_SRC elisp
(defun de-indent-code ()
  (interactive)
  (goto-min-save-match-data
   (while (re-search-forward "^[[:space:]]\\{4\\}" nil t) nil t
	  (replace-match "")
	  (next-line))))
#+END_SRC
