#+TITLE: Converting My Site with Emacs and Org
Wed, 08/14/19

--------------------------------------------------------------------------------

Lately Emacs has been taking over my computing experience. 
I discovered evil-mode is a better vi emulator than vim. 
At work I realized that Emacs could let me forget I was using OSX's terrible window manager.
I spent hours learning elisp and configuring my major modes so that all my common tasks are an easy key bind away.
I organized my life with org-mode. 

But there remained one huge annoyance:

This website was created with a hodgepodge of html, python, and markdown. 
I couldn't resist when I realized I could replace this with org and elisp.

** Changing markdown into org with elisp
The first step was to change my markdown files into org.
Disclaimer: I probably would of spent less time on this if I did this manually, but it was a good excuse to
practice elisp/regexes.

Lisp macros are like html templating engines; the code after the back tick is the template,
and code after the comma is the value to be inserted.
This will cause my functions to be expanded at compile time.
#+BEGIN_SRC elisp
(defmacro goto-min-save-match-data (body)
  `(progn 
    (goto-char (point-min))
     (save-match-data ,body)))
#+END_SRC
#+BEGIN_SRC elisp
(defun replace-regex-current-buffer (pattern new)
  (goto-min-save-match-data
   (while (re-search-forward pattern nil t) nil t
	  (replace-match new))))
#+END_SRC

#+BEGIN_SRC elisp
(defun replace-simple-md ()
  (interactive)
  ;; Change all the tabs to two spaces
  (replace-regex-current-buffer "\t" "  ")

  ;; Use 80 dashes for a line instead of 3
  (replace-regex-current-buffer "^---" (s-repeat 80 "-"))

  ;; Change lists
  (replace-regex-current-buffer "*" "+")

  ;; Convert image links from markdown syntax to org syntax
  (replace-regex-current-buffer "!\\[.+(\\(.+\\))" "[[file:../../\\1]]"))
#+END_SRC

My least favorite feature of markdown is the code syntax. In a markdown file, four spaces before a line 
means that it will be compiled as a code block. This function deindents markdown code blocks by 4 spaces.
Luckily I included language tags before code blocks for highlighting.
#+BEGIN_SRC python
    :::python
    def hello()
        print("hello")
#+END_SRC 

This means that I can easily find the beginning of code blocks by looking for ~:::~ followed by a word.
The following function replaces wraps markdown code blocks in ~#+BEGIN_SRC~ and ~#+END_SRC#~. It captures the
language tag and adds it after the BEGIN tag.
#+BEGIN_SRC elisp
(defun replace-code-section ()
  (interactive)
  (goto-char (point-min))
  (save-match-data
    (while (re-search-forward "^[[:blank:]]+:::\\(\\w+\\)" nil t) nil t
	   (replace-match "#+BEGIN_SRC \\1")
	   (re-search-forward "^[[:alnum:]]")
           (move-beginning-of-line nil)
           (newline)
	   (insert "#+END_SRC")
	   (newline))))
#+END_SRC
#+BEGIN_SRC elisp
;;; ![cors](images/api-gateway-cors.jpg) => [[file:../../images/api-gateway-cors.png]]
(defun convert-link ()
 (interactive)
  (goto-min-save-match-data
   (while (re-search-forward "!\\[.+(\\(.+\\))/" nil t) nil t
     (replace-match "[[file:..\\/..\\/\\1]]"))))
     
#+END_SRC
Finally, deindent the old markdown code blocks by 4 spaces.
#+BEGIN_SRC elisp
(defun de-indent-code ()
  (interactive)
  (goto-min-save-match-data
   (while (re-search-forward "^[[:space:]]\\{4\\}" nil t) nil t
	  (replace-match "")
	  (next-line))))
#+END_SRC
